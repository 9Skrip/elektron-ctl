//
//  A4Sound.m
//  A4Sysex
//
//  Created by Jakob Penca on 3/31/13.
//  Copyright (c) 2013 Jakob Penca. All rights reserved.
//

#import "A4Sound.h"

const UInt16 A4SoundParamIndices[] =
{
	0xa,	// negative flag for OSC 1 & 2 finetune. bit 3 = OSC2, bit 5 = OSC1
	0xb,	// 0x40 = 0, 0x00 = -63, 0x7f = +63
	0xc,	// 0x00 = 0, 0x7e = +63
	0xf,	// 0x00 - 0x7f, 0x40 = 0
	0x14,	// 0x01 = ON, 0x00 = OFF
	0x18,	// 0x00 - 0x7f
	0x1d,	// 0x00 - 0x07
	0x21,	// 0x00 - 0x04
	0x26,	// 0x00 - 0x7f, 0x40 = 0
	0x2b,	// 0x00 - 0x7f
	0x2f,   // 0x00 - 0x7f
	0x3b,	// 0x00 - 0x7f
	0x3d,	// 0x00 - 0x7f
	0x3f,	// 0x00 - 0x7f
	0xd,	// 0x40 = 0, 0x00 = -63, 0x7f = +63
	0xe,	// 0x00 = 0, 0x7e = +63
	0x11,	// 0x00 - 0x7f, 0x40 = 0
	0x16,	// 0x01 = ON, 0x00 = OFF
	0x1b,	// 0x00 - 0x7f
	0x1f,	// 0x00 - 0x07
	0x24,	// 0x00 - 0x04
	0x28,	// 0x00 - 0x7f, 0x40 = 0
	0x2d,	// 0x00 - 0x7f
	0x31,   // 0x00 - 0x7f
	0x41,   // 0x00 - 0x01
	0x44,   // 0x00 - 0x01
	0x46,   // 0x00 - 0x03
	0x48,   // 0x00 - 0x7f
	0x4b,   // 0x00 - 0x7f 0x40 = 0
	0x4d,   // 0x00 - 0x7f
	0x4f,   // 0x00 - 0x01
	0x51,   // 0x00 - 0x7f 0x40 = 0
	0x54,   // 0x00 - 0x7f
	0x56,   // 0x00 - 0x7f
	0x52,  // 0x00 - 0x01 ?????
	0x58,  // 0x00 - 0x7f
	0x59,  // 0x00 - 0x7f
	0x5b,  // 0x00 - 0x7f
	0x5d,  // 0x00 - 0x7f, 0x40 = 0
	0x5f,  // 0x00 - 0x7f, 0x40 = 0
	0x61,  // 0x00 - 0x7f, 0x40 = 0
	0x62,  // 0x00 - 0x10 ?????
	0x64,  // 0x00 - 0x7f
	0x65,  // 0x00 - 0x7f
	0x66,  // 0x00 - 0x7f
	0x68,  // 0x00 - 0x06
	0x6b,  // 0x00 - 0x7f, 0x40 = 0
	0x6d,  // 0x00 - 0x7f, 0x40 = 0
	0x84,  // 0x00 - 0x7f
	0x8b,  // 0x00 - 0x7f
	0x91,  // 0x00 - 0x7f
	0x98,  // 0x00 - 0x7f
	0x9f,  // 0x00 - 0x0b
	0x71,  // 0x00 - 0x7f
	0x74,  // 0x00 - 0x7f
	0x76,  // 0x00 - 0x7f
	0x78,  // 0x00 - 0x7f, 0x40 = 0
	0x7b,  // 0x00 - 0x7f
	0x7f,  // 0x00 - 0x7f
	0x86,  // 0x00 - 0x7f
	0x8d,  // 0x00 - 0x7f
	0x94,  // 0x00 - 0x7f
	0x9b,  // 0x00 - 0x7f
	0xa1,  // 0x00 - 0x7f
	0xa6,  //	???
	0xa8,  //	???
	0xaf,  //	 0xaf & 0xb0 ?????
	0xb1,  //	 0xb1 & 0xb2 & 0xb3 ?????
	0x81,  // 0x00 - 0x7f
	0x88,  // 0x00 - 0x7f
	0x8f,  // 0x00 - 0x7f
	0x96,  // 0x00 - 0x7f
	0x9d,  // 0x00 - 0x7f
	0xa4,  // 0x00 - 0x7f
	0xab,  //	???
	0xad,  //	???
	0xb4,  //	 0xb2 & 0xb4 & 0xb5 ?????
	0xb6,  //	 0xb2 & 0xb6 & 0xb7 ?????
	0xb8,  //	 0x00 - 0x7f, 0x40 = 0
	0xbd,  //	 0x00 - 0x0b
	0xc1,  //	 0x00 - 0x7f, 0x40 = 0
	0xc6,  //	 0x00 - 0x7f,
	0xcb,  //	 0x00 - 0x04
	0xcf,  //	 0x00 - 0x06
	0xd4,  //	 ???
	0xd6,  //	 ???
	0xdd,  //	 0xda & 0xdd & 0xde ????
	0xdf,  //	 0xda & 0xdf & 0xe0 ????
	0xbb,  //	 0x00 - 0x7f, 0x40 = 0
	0xbf,  //	 0x00 - 0x0b
	0xc4,  //	 0x00 - 0x7f, 0x40 = 0
	0xc8,  //	 0x00 - 0x7f,
	0xcd,  //	 0x00 - 0x04
	0xd1,  //	 0x00 - 0x06
	0xd8,  //	 ???
	0xdb,  //	 ???
	0xe1,  //	 0xe1 & 0xe3 ????
	0xe4  //	 0xe4 & 0xe5 ????
};


const uint8_t A4SoundParamMinValues[] = 
{
	0,	// negative flag for OSC 1 & 2 finetune. bit 3 = OSC2, bit 5 = OSC1
	0,	// 0x40 = 0, 0x00 = -63, 0x7f = +63
	0,	// 0x00 = 0, 0x7e = +63
	0,	// 0x00 - 0x7f, 0x40 = 0
	0x0,	// 0x01 = ON, 0x00 = OFF
	0x0,	// 0x00 - 0x7f
	0x0,	// 0x00 - 0x07
	0x0,	// 0x00 - 0x04
	0x0,	// 0x00 - 0x7f, 0x40 = 0
	0x0,	// 0x00 - 0x7f
	0x0,   // 0x00 - 0x7f
	0x0,	// 0x00 - 0x7f
	0x0,	// 0x00 - 0x7f
	0x0,	// 0x00 - 0x7f
	0x0,	// 0x40 = 0, 0x00 = -63, 0x7f = +63
	0x0,	// 0x00 = 0, 0x7e = +63
	0x0,	// 0x00 - 0x7f, 0x40 = 0
	0x0,	// 0x01 = ON, 0x00 = OFF
	0x0,	// 0x00 - 0x7f
	0x0,	// 0x00 - 0x07
	0x0,	// 0x00 - 0x04
	0x0,	// 0x00 - 0x7f, 0x40 = 0
	0x0,	// 0x00 - 0x7f
	0x0,   // 0x00 - 0x7f
	0x0,   // 0x00 - 0x01
	0x0,   // 0x00 - 0x01
	0x0,   // 0x00 - 0x03
	0x0,   // 0x00 - 0x7f
	0x0,   // 0x00 - 0x7f 0x40 = 0
	0x0,   // 0x00 - 0x7f
	0x0,   // 0x00 - 0x01
	0x0,   // 0x00 - 0x7f 0x40 = 0
	0x0,   // 0x00 - 0x7f
	0x0,   // 0x00 - 0x7f
	0x0,  // 0x00 - 0x01 ?????
	0x0,  // 0x00 - 0x7f
	0x0,  // 0x00 - 0x7f
	0x0,  // 0x00 - 0x7f
	0x0,  // 0x00 - 0x7f, 0x40 = 0
	0x0,  // 0x00 - 0x7f, 0x40 = 0
	0x0,  // 0x00 - 0x7f, 0x40 = 0
	0x0,  // 0x00 - 0x10 ?????
	0x0,  // 0x00 - 0x7f
	0x0,  // 0x00 - 0x7f
	0x0,  // 0x00 - 0x7f
	0x0,  // 0x00 - 0x06
	0x0,  // 0x00 - 0x7f, 0x40 = 0
	0x0,  // 0x00 - 0x7f, 0x40 = 0
	0x0,  // 0x00 - 0x7f
	0x0,  // 0x00 - 0x7f
	0x0,  // 0x00 - 0x7f
	0x0,  // 0x00 - 0x7f
	0x0,  // 0x00 - 0x0b
	0x0,  // 0x00 - 0x7f
	0x0,  // 0x00 - 0x7f
	0x0,  // 0x00 - 0x7f
	0x0,  // 0x00 - 0x7f, 0x40 = 0
	0x0,  // 0x00 - 0x7f
	0x0,  // 0x00 - 0x7f
	0x0,  // 0x00 - 0x7f
	0x0,  // 0x00 - 0x7f
	0x0,  // 0x00 - 0x7f
	0x0,  // 0x00 - 0x7f
	0x0,  // 0x00 - 0x7f
	0x12,  //	???
	0x12,  //	???
	0x0,  //	 0xaf & 0xb0 ?????
	0x0,  //	 0xb1 & 0xb2 & 0xb3 ?????
	0x0,  // 0x00 - 0x7f
	0x0,  // 0x00 - 0x7f
	0x0,  // 0x00 - 0x7f
	0x0,  // 0x00 - 0x7f
	0x0,  // 0x00 - 0x7f
	0x0,  // 0x00 - 0x7f
	0x12,  //	???
	0x12,  //	???
	0x0,  //	 0xb2 & 0xb4 & 0xb5 ?????
	0x0,  //	 0xb2 & 0xb6 & 0xb7 ?????
	0x0,  //	 0x00 - 0x7f, 0x40 = 0
	0x0,  //	 0x00 - 0x0b
	0x0,  //	 0x00 - 0x7f, 0x40 = 0
	0x0,  //	 0x00 - 0x7f,
	0x0,  //	 0x00 - 0x04
	0x0,  //	 0x00 - 0x06
	0x12,  //	 ???
	0x12,  //	 ???
	0x0,  //	 0xda & 0xdd & 0xde ????
	0x0,  //	 0xda & 0xdf & 0xe0 ????
	0x0,  //	 0x00 - 0x7f, 0x40 = 0
	0x0,  //	 0x00 - 0x0b
	0x0,  //	 0x00 - 0x7f, 0x40 = 0
	0x0,  //	 0x00 - 0x7f,
	0x0,  //	 0x00 - 0x04
	0x0,  //	 0x00 - 0x06
	0x12,  //	 ???
	0x12,  //	 ???
	0x0,  //	 0xe1 & 0xe3 ????
	0x0  //	 0xe4 & 0xe5 ????
	
};

const uint8_t A4SoundParamMaxValues[] = 
{
	0x7f,	// negative flag for OSC 1 & 2 finetune. bit 3 = OSC2, bit 5 = OSC1
	0x7f,	// 0x40 = 0, 0x00 = -63, 0x7f = +63
	0x7e,	// 0x00 = 0, 0x7e = +63
	0x7f,	// 0x00 - 0x7f, 0x40 = 0
	0x01,	// 0x01 = ON, 0x00 = OFF
	0x7f,	// 0x00 - 0x7f
	0x07,	// 0x00 - 0x07
	0x04,	// 0x00 - 0x04
	0x7f,	// 0x00 - 0x7f, 0x40 = 0
	0x7f,	// 0x00 - 0x7f
	0x7f,   // 0x00 - 0x7f
	0x7f,	// 0x00 - 0x7f
	0x7f,	// 0x00 - 0x7f
	0x7f,	// 0x00 - 0x7f
	0x7f,	// 0x40 = 0, 0x00 = -63, 0x7f = +63
	0x7e,	// 0x00 = 0, 0x7e = +63
	0x7f,	// 0x00 - 0x7f, 0x40 = 0
	0x01,	// 0x01 = ON, 0x00 = OFF
	0x7f,	// 0x00 - 0x7f
	0x07,	// 0x00 - 0x07
	0x04,	// 0x00 - 0x04
	0x7f,	// 0x00 - 0x7f, 0x40 = 0
	0x7f,	// 0x00 - 0x7f
	0x7f,   // 0x00 - 0x7f
	0x01,   // 0x00 - 0x01
	0x01,   // 0x00 - 0x01
	0x03,   // 0x00 - 0x03
	0x7f,   // 0x00 - 0x7f
	0x7f,   // 0x00 - 0x7f 0x40 = 0
	0x7f,   // 0x00 - 0x7f
	0x01,   // 0x00 - 0x01
	0x7f,   // 0x00 - 0x7f 0x40 = 0
	0x7f,   // 0x00 - 0x7f
	0x7f,   // 0x00 - 0x7f
	0x7f,  // 0x00 - 0x01 ?????
	0x7f,  // 0x00 - 0x7f
	0x7f,  // 0x00 - 0x7f
	0x7f,  // 0x00 - 0x7f
	0x7f,  // 0x00 - 0x7f, 0x40 = 0
	0x7f,  // 0x00 - 0x7f, 0x40 = 0
	0x7f,  // 0x00 - 0x7f, 0x40 = 0
	0x7f,  // 0x00 - 0x10 ?????
	0x7f,  // 0x00 - 0x7f
	0x7f,  // 0x00 - 0x7f
	0x7f,  // 0x00 - 0x7f
	0x06,  // 0x00 - 0x06
	0x7f,  // 0x00 - 0x7f, 0x40 = 0
	0x7f,  // 0x00 - 0x7f, 0x40 = 0
	0x7f,  // 0x00 - 0x7f
	0x7f,  // 0x00 - 0x7f
	0x7f,  // 0x00 - 0x7f
	0x7f,  // 0x00 - 0x7f
	0x0b,  // 0x00 - 0x0b
	0x7f,  // 0x00 - 0x7f
	0x7f,  // 0x00 - 0x7f
	0x7f,  // 0x00 - 0x7f
	0x7f,  // 0x00 - 0x7f, 0x40 = 0
	0x7f,  // 0x00 - 0x7f
	0x7f,  // 0x00 - 0x7f
	0x7f,  // 0x00 - 0x7f
	0x7f,  // 0x00 - 0x7f
	0x7f,  // 0x00 - 0x7f
	0x7f,  // 0x00 - 0x7f
	0x7f,  // 0x00 - 0x7f
	0x32,  //	???
	0x32,  //	???
	0x7f,  //	 0xaf & 0xb0 ?????
	0x7f,  //	 0xb1 & 0xb2 & 0xb3 ?????
	0x7f,  // 0x00 - 0x7f
	0x7f,  // 0x00 - 0x7f
	0x7f,  // 0x00 - 0x7f
	0x7f,  // 0x00 - 0x7f
	0x7f,  // 0x00 - 0x7f
	0x7f,  // 0x00 - 0x7f
	0x5d,  //	???
	0x5d,  //	???
	0x7f,  //	 0xb2 & 0xb4 & 0xb5 ?????
	0x7f,  //	 0xb2 & 0xb6 & 0xb7 ?????
	0x7f,  //	 0x00 - 0x7f, 0x40 = 0
	0x0b,  //	 0x00 - 0x0b
	0x7f,  //	 0x00 - 0x7f, 0x40 = 0
	0x7f,  //	 0x00 - 0x7f,
	0x04,  //	 0x00 - 0x04
	0x06,  //	 0x00 - 0x06
	0x49,  //	 ???
	0x49,  //	 ???
	0x7f,  //	 0xda & 0xdd & 0xde ????
	0x7f,  //	 0xda & 0xdf & 0xe0 ????
	0x7f,  //	 0x00 - 0x7f, 0x40 = 0
	0x0b,  //	 0x00 - 0x0b
	0x7f,  //	 0x00 - 0x7f, 0x40 = 0
	0x7f,  //	 0x00 - 0x7f,
	0x04,  //	 0x00 - 0x04
	0x06,  //	 0x00 - 0x06
	0x5d,  //	 ???
	0x5d,  //	 ???
	0x7f,  //	 0xe1 & 0xe3 ????
	0x7f  //	 0xe4 & 0xe5 ????
};


static float map(float value,
				 float istart, float istop,
				 float ostart, float ostop)
{
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}

static int Wrap(int kX, int const kLowerBound, int const kUpperBound)
{
    int range_size = kUpperBound - kLowerBound + 1;
	
    if (kX < kLowerBound)
        kX += range_size * ((kLowerBound - kX) / range_size + 1);
	
    return kLowerBound + (kX - kLowerBound) % range_size;
}

@interface A4Sound()
- (void) setParam:(A4SoundParam) param toValue:(uint8_t)val;
- (uint8_t)param:(A4SoundParam)param;
@end

@implementation A4Sound

- (uint8_t)param:(A4SoundParam)param
{
	if(param >= self.data.length) return 0;
	const uint8_t *bytes = self.data.bytes;
	return bytes[param];
}

- (float)floatValueForParam:(A4SoundParam)param
{
	if(param >= A4SoundParam_ItemCount) return 0;
	const uint8_t *bytes = self.data.bytes;
	
	if(param == A4SoundParam_OSC1_TUN ||
	   param == A4SoundParam_OSC2_TUN )
	{
		uint8_t shift = 3;
		uint8_t fine = bytes[A4SoundParamIndices[A4SoundParam_OSC2_FIN]];
		
		if(param == A4SoundParam_OSC1_TUN)
		{
			shift = 5;
			fine = bytes[A4SoundParamIndices[A4SoundParam_OSC1_FIN]];
		}
		
		
		float fraction = map(fine, 0, 0x7e, 0, 1);
		
		uint8_t negFlag = bytes[A4SoundParamIndices[A4SoundParam_OSC1_NEG]];
		uint8_t coarse = bytes[A4SoundParamIndices[param]];
		float val = coarse;
		
		
		return coarse;
	}
	else
	{
		return bytes[A4SoundParamIndices[param]];
	}
}

- (void)setParam:(A4SoundParam)param toFloatValue:(float)val
{
	if(val < A4SoundParamMinValues[param])
		val = A4SoundParamMinValues[param];
	if(val > A4SoundParamMaxValues[param])
		val = A4SoundParamMaxValues[param];
	
	uint8_t *bytes = self.data.mutableBytes;
	if(param == A4SoundParam_OSC1_TUN ||
	   param == A4SoundParam_OSC2_TUN)
	{
		uint8_t flagBit = 1 << 5;
		if(param == A4SoundParam_OSC2_TUN)
			flagBit = 1 << 3;
		
		uint8_t negFlag = bytes[A4SoundParamIndices[A4SoundParam_OSC1_NEG]];
		int coarse = val;
		float fraction = val - coarse;
		uint8_t fine = 0;
		
		if(fraction >= 0 && fraction <= .5) // positive detune
		{
			negFlag &= ~flagBit;
			fine = (uint8_t) map(fraction, 0, .5, 0, 63) * 2;
		}
		else if(fraction) // negative detune
		{
			negFlag |= flagBit;
			fine = (uint8_t) map(fraction, .5, 1, 0, 63) * 2;
		}
		
		if(fine > 0x7e) fine = 0x7e;
		
		DLog(@"TUN val: %03.3f coarse: %03d fine: %d", val, coarse, fine);
		
		bytes[A4SoundParamIndices[A4SoundParam_OSC1_NEG]] = negFlag;
		bytes[A4SoundParamIndices[param]] = coarse;
		bytes[A4SoundParamIndices[param+1]] = fine;
	}
	else if(param == A4SoundParam_OSC1_NEG ||
			param == A4SoundParam_OSC1_FIN ||
			param == A4SoundParam_OSC2_FIN)
	{
		return;
	}
	else
	{
		bytes[A4SoundParamIndices[param]] = (uint8_t) val;
	}
}

- (void)setParam:(A4SoundParam)param toValue:(uint8_t)val
{
	uint8_t *bytes = self.data.mutableBytes;
	bytes[A4SoundParamIndices[param]] = val;
}

- (void)setName:(NSString *)name
{
	name = [name uppercaseString];
	NSCharacterSet * set =
	[[NSCharacterSet characterSetWithCharactersInString:@"ABCDEFGHIJKLKMNOPQRSTUVWXYZ0123456789+-=&/#@?\%$0123456789 "] invertedSet];
	name = [[name componentsSeparatedByCharactersInSet:set] componentsJoinedByString:@""];
	
	NSUInteger len = name.length;
	if (len > 15) len = 15;
	name = [name substringWithRange:NSMakeRange(0, len)];
	
	const uint8_t *cString = (const uint8_t *)[[name uppercaseString] cStringUsingEncoding:NSASCIIStringEncoding];
	unsigned long cStringLength = strlen((const char *)cString);
	
	uint8_t *bytes = self.data.mutableBytes;
	bytes += 0x18d;
	
	for (int j = 0; j < 15; j++)
		bytes[j] = 0;
	
	int i = 0;
	
	for (int j = 0; j < cStringLength; j++)
	{
		bytes[i++] = cString[j];
	}
	
	[self updateChecksum];
}

- (NSString *)name
{
	uint8_t buf[16] = {0};
	NSString *name = @"";
	const uint8_t *bytes = self.data.bytes;
	bytes += 0x18d;
	
	for (int i = 0, j = 0; i < 15; i++)
	{
		buf[i] = bytes[j];
		if(bytes[j] == 0)
		{
			j++;
			buf[i] = bytes[j];
		}
		j++;
	}
	
	name = [NSString stringWithCString:(const char *)&buf encoding:NSASCIIStringEncoding];
	return name;
}

@end
